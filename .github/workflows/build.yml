name: Build Custom Bazzite Variants

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Check for upstream updates every 4 hours (builds only if base images changed)
    - cron: '0 */4 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [handheld, desktop]
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check if build is needed
      id: build-check
      run: |
        # Always build on push or PR (code changes)
        if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Code changes detected - building regardless of upstream status"
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "reason=code-changes" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For scheduled runs, check if upstream base images have changed
        if [ "${{ github.event_name }}" = "schedule" ]; then
          # Define base images for each variant
          if [ "${{ matrix.variant }}" = "desktop" ]; then
            BASE_IMAGE="ghcr.io/ublue-os/bazzite-deck-nvidia-gnome:latest"
          else
            BASE_IMAGE="ghcr.io/ublue-os/bazzite-deck-gnome:latest"
          fi
          
          echo "Checking upstream base image: $BASE_IMAGE"
          
          # Get current digest of upstream base image
          UPSTREAM_DIGEST=$(docker buildx imagetools inspect "$BASE_IMAGE" --format '{{.Manifest.Digest}}')
          echo "Current upstream digest: $UPSTREAM_DIGEST"
          
          # Try to get our last built image's base digest from labels
          LAST_DIGEST=""
          if docker buildx imagetools inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}" >/dev/null 2>&1; then
            LAST_DIGEST=$(docker buildx imagetools inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}" --format '{{index .Manifest.Annotations "org.opencontainers.image.base.digest"}}' 2>/dev/null || echo "")
          fi
          
          echo "Last build base digest: ${LAST_DIGEST:-'none (first build)'}"
          
          # Compare digests
          if [ "$UPSTREAM_DIGEST" != "$LAST_DIGEST" ] || [ -z "$LAST_DIGEST" ]; then
            echo "Upstream base image has changed - building new image"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "reason=upstream-update" >> $GITHUB_OUTPUT
            echo "upstream-digest=$UPSTREAM_DIGEST" >> $GITHUB_OUTPUT
          else
            echo "No upstream changes detected - skipping build to save resources"
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "reason=no-changes" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Log in to Container Registry
      if: steps.build-check.outputs.should-build == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: steps.build-check.outputs.should-build == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=${{ matrix.variant }},enable={{is_default_branch}}
          type=raw,value=${{ matrix.variant }}-{{sha}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Custom Bazzite ${{ matrix.variant }}
          org.opencontainers.image.description=Custom Bazzite variant with VS Code and podman-docker
          org.opencontainers.image.base.digest=${{ steps.build-check.outputs.upstream-digest || 'unknown' }}
          build.trigger=${{ steps.build-check.outputs.reason || 'manual' }}

    - name: Build and push Docker image
      if: steps.build-check.outputs.should-build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Containerfile
        target: ${{ matrix.variant }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build summary
      run: |
        if [ "${{ steps.build-check.outputs.should-build }}" = "true" ]; then
          echo "✅ Built ${{ matrix.variant }} variant"
          echo "📋 Reason: ${{ steps.build-check.outputs.reason }}"
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"
        else
          echo "⏭️ Skipped ${{ matrix.variant }} variant build"
          echo "📋 Reason: ${{ steps.build-check.outputs.reason }}"
          echo "💡 No upstream changes detected - saving GitHub Actions resources"
        fi
